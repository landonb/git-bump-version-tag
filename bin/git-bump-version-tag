#!/bin/bash
# vim:tw=0:ts=2:sw=2:et:norl:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/git-bump-version-tag#üê´
# Copyright ¬© 2020 Landon Bouma. All rights reserved.
# License: MIT. Please find more in the LICENSE file.

# YOU: Uncomment (or set from environment) for a dry run:
#  GIT_TVP_DRY=true

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# FIXME/2020-07-01: Handle this error better: If there's no tracking branch,
# you'll see, e.g.,
#   $ git bump p
#   fatal: ambiguous argument '@{u}': unknown revision or path not in the working tree.
#   Use '--' to separate paths from revisions, like this:
#   'git <command> [<revision>...] -- [<file>...]'
#   ALERT: No remote named ‚Äú@{u}‚Äù
#   Please Yes/no/skip: Okay to bump ‚Äú1.0.2‚Äù ‚Üí ‚Äú1.0.3‚Äù? [Y/n/s]
#   ERROR: No remote named ‚Äú@{u}‚Äù
# The current work-around is to set a tracking branch, e.g.,:
#   $ git pr -u
#   Branch 'release' set up to track remote branch 'release' from 'release'.
#   Everything up-to-date
#   $ git bump p
#   Please Yes/no/skip: Okay to bump ‚Äú1.0.3‚Äù ‚Üí ‚Äú1.0.4‚Äù? [Y/n/s]
# Except when I create a new branch to test, I get a different error, e.g.,
#   $ git co -b test
#   Switched to a new branch 'test'
#   $ git bump s
#   fatal: no upstream configured for branch 'test'
#   ALERT: No remote named ‚Äúorigin‚Äù
#   ERROR: No remote named ‚Äúorigin‚Äù
# Which is actually what I'd expect. So I'm not quite sure how I triggered
# the first error I mentioned.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

GIT_TVP_DRY=${GIT_TVP_DRY:-false}

# ***

insist_cmd () {
  cmdname="$1"
  command -v "${cmdname}" > /dev/null && return
  >&2 echo "ERROR: Missing system command ‚Äò${cmdname}‚Äô."
  exit 1
}

# ***

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# *** <beg boilerplate `source_deps`: ------------------------------|
#                                                                   |

readlink_f () {
  local resolve_path="$1"
  local ret_code=0
  if [ "$(readlink --version 2> /dev/null)" ]; then
    # Linux: Modern readlink.
    resolve_path="$(readlink -f -- "${resolve_path}")"
  else
    # macOHHHH-ESS/macOS: No `readlink -f`.
    local before_cd="$(pwd -L)"
    while [ -n "${resolve_path}" ] && [ -h "${resolve_path}" ]; do
      local basedir_link="$(dirname -- "${resolve_path}")"
      # `readlink -f` checks all but final component exist.
      # So if dir path leading to final componenet missing, return empty string.
      if [ ! -e "${basedir_link}" ]; then
        resolve_path=""
        ret_code=1
      else
        local resolve_file
        resolve_link="$(readlink -- "${resolve_path}")"
        case "${resolve_link}" in
          /*)
            # Absolute path.
            resolve_file="${resolve_link}"
            ;;
          *)
            # Relative path.
            resolve_file="${basedir_link}/${resolve_link}"
            ;;
        esac
        local resolved_dir="$(dirname -- "${resolve_file}")"
        if [ ! -d "${resolved_dir}" ]; then
          resolve_path=""
          ret_code=1
        else
          cd $(dirname -- "${resolve_file}") > /dev/null
          resolve_path="$(pwd -P)/$(basename -- "${resolve_file}")"
        fi
      fi
    done
    cd "${before_cd}"
  fi
  echo -n "${resolve_path}"
  [ -n "${resolve_path}" ] && echo
  return ${ret_code}
}

# ***

source_deps () {
  local thispth="$1"
  local prefix=""
  local depsnok=false

  _source_it () {
    local prfx="${1:-.}"
    local depd="${2:-.}"
    local file="${3:-.}"
    local path="${prfx}/${depd}/${file}"
    if command -v "${file}" > /dev/null; then
      # Use version found on PATH.
      . "${file}"
    elif [ -f "${path}" ]; then
      # Fallback on local deps/ copy.
      # NOTE: `dash` complains if missing './'.
      . "${path}"
    else
      local depstxt=''
      [ "${prfx}" != "." ] && depstxt="in ‚Äò${prfx}/${depd}‚Äô or "
      >&2 echo "MISSING: ‚Äò${file}‚Äô not found ${depstxt}on PATH."
      depsnok=true
    fi
  }

  # Allow user to symlink executables and not libraries.
  # E.g., `ln -s /path/to/bin/logger.sh /tmp/logger.sh ; /tmp/logger.sh`
  # knows that it can look relative to /path/to/bin/ for sourceable files.
  prefix="$(dirname -- "$(readlink_f "${thispth}")")"

  #                                                                 |
  # *** stop boilerplate> ------------------------------------------|

  insist_cmd 'pep440cmp'

  # Load ask_yesnoskip.
  # https://github.com/landonb/sh-ask-yesnoskip
  _source_it "${prefix}" "../deps/sh-ask-yesnoskip/bin" "ask-yesnoskip.sh"

  # Load git_* functions.
  # https://github.com/landonb/sh-git-nubs
  _source_it "${prefix}" "../deps/sh-git-nubs/bin" "git-nubs.sh"

  # *** <more boilerplate: -----------------------------------------|
  #                                                                 |

  ! ${depsnok}
}

#                                                                   |
# *** end boilerplate `source_deps`> -------------------------------|

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# ***

# Get the name of the remote of the tracking branch.
# E.g., if the user sets the current branch to track upstream/release, e.g.,
#   git checkout --track upstream/release
# or
#   git push -u upstream release
# or
#   git branch -u upstream/release
# prints the remote name, "upstream".
# Ref:
#   Find out which remote branch a local branch is tracking
#   https://stackoverflow.com/questions/171550/
#     find-out-which-remote-branch-a-local-branch-is-tracking
git_tracking_branch_remote () {
  # Either of these calls works:
  #   git rev-parse --abbrev-ref --symbolic-full-name @{u}
  # or
  #   git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)"
  # and each returns a string formatted as "{remote}/{branch}".
  # We just want the remote.
  git rev-parse --abbrev-ref --symbolic-full-name @{u} | /bin/sed -e 's#/.*$##'
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_branch_head_version () {
  commits_vtags="$(git_versions_tagged_for_commit)"
  [ -z "${commits_vtags}" ] && return
  local n_tags=$(echo "${commits_vtags}" | wc -l)
  if [ "${n_tags}" -ne 1 ]; then
    >&2 echo "ERROR: Expected no more than 1 but found ${n_tags} version tags on HEAD."
    exit 1
  fi
  # EXPLAIN/2020-03-24: Why can I get away without `echo -n`, i.e., no newlines in output?
  # - Does echo know when it's in a pipeline or something?
  # - Maybe that's why printf would be a better choice!!
  echo -n "${commits_vtags}"
}

must_head_unversioned_or_matching () {
  local headvers="$1"
  local fullvers="$2"
  local remote="$3"
  [ -z "${headvers}" ] && return
  [ "${headvers}" = "${fullvers}" ] && return
  # MAYBE/2020-03-23 21:50: Allow this use case?
  # - And do what? Replace tag with different version?
  # Seems like an unlikely use case, actually.
  >&2 echo "ERROR: HEAD already version-tagged ‚Äú${headvers}‚Äù"
  #>&2 echo
  print_tag_delete_hints "${headvers}" "${remote}"
  exit 1
}

print_tag_delete_hints () {
  local headvers="$1"
  local remote="$2"
  >&2 echo "- To delete the local tag, try:"
  #>&2 echo
  >&2 echo "    git tag --delete ${headvers}"
  #>&2 echo
  >&2 echo "- To delete the remote tag, try:"
  #>&2 echo
  >&2 echo "    git push ${remote} :refs/tags/${headvers}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

must_remote_exists () {
  local remote="$1"
  git_remote_exists "${remote}" && return
  >&2 echo "ERROR: No remote named ‚Äú${remote}‚Äù"
  exit 1
}

warn_remote_absent () {
  local remote="$1"
  git_remote_exists "${remote}" && return
  >&2 echo "ALERT: No remote named ‚Äú${remote}‚Äù"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Note that there's a similar get-latest-version-tag in landonb/sh-git-nubs:
#   git_last_version_tag_describe
# except it's naive and finds only the most *recent* version tag.
# It does not validate that it's the largest version tag.
# We can do better, if only to just be complete.

GITSMART_RE_VERSION_TAG='[v0-9][0-9.]*'

# Match groups: \1: major * \2: minor * \4: patch * \5: seppa * \6: alpha.
GITSMART_RE_VERSPARTS='^v?([0-9]+)\.([0-9]+)(\.([0-9]+)([^0-9]*)(.*))?'

# MAYBE/2020-03-24: The `git tag -l` calls here just look in the current
# branch. We might want to consider looking across all branches.
# - But really that would just be a failsafe. Your Git Workflow should
#   preclude such an event, i.e., all branches will share the same tags,
#   because you won't tag feature branches, you'll only tag the main
#   release branch (possibly called "release"), and that release branch
#   will always be an ancestor of the main development trunk (possibly
#   called "main", "develop", "trunk", or "proving" (the name I use)).
# - Here's a trick to get the (latest?) tag name across all branches:
#   git describe --tags `git rev-list --tags --max-count=1`

latest_version_basetag () {
  git tag -l "${GITSMART_RE_VERSION_TAG}" |
    /bin/sed -E "s/${GITSMART_RE_VERSPARTS}/\1.\2.\4/" |
    sort -r --version-sort |
    head -n1
}

latest_version_fulltag () {
  local basevers="$1"
  git tag -l "${basevers}*" -l "v${basevers}*" |
    /bin/sed -E "s/${GITSMART_RE_VERSPARTS}/\6,\1.\2.\4\5\6/" |
    sort -r -n |
    head -n1 |
    /bin/sed -E "s/^[^,]*,//"
}

latest_version_tag () {
  local basevers="$(latest_version_basetag)"
  # See if basevers really tagged or if gleaned from alpha.
  if git show-ref --tags -- "${basevers}" > /dev/null; then
    fullvers="${basevers}"
  else
    # Assemble alpha-number-prefixed versions to sort and grab largest alpha.
    fullvers="$(latest_version_fulltag "${basevers}")"
  fi
  echo "${fullvers}"
}

latest_version_parts () {
  local fullvers="$1"
  declare -a partsarr
  partsarr=($(echo "${fullvers}" | /bin/sed -E "s/${GITSMART_RE_VERSPARTS}/\1 \2 \4 \5 \6/"))
  echo "${partsarr[@]}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

must_version_gt () {
  local part_or_version="$1"
  local fullvers="$2"
  pep440cmp "${part_or_version}" gt "${fullvers}" > /dev/null && return
  >&2 echo "ERROR: Desired version not greater than current version!"
  >&2 echo "  ‚Äú${part_or_version}‚Äù !> ‚Äú${fullvers}‚Äù"
  exit 1
}

resolve_version_bump () {
  local fullvers="$1"
  local part_or_version="$2"
  local partsarr
  partsarr="$(latest_version_parts "${fullvers}")"
  local major minor patch seppa alpha
  IFS=' ' read major minor patch seppa alpha <<< "${partsarr[@]}"
  case "${part_or_version}" in
    M | -M | ma | major)
      let 'major += 1'; minor=0; patch=0; seppa=; alpha=;
      ;;
    m | -m | mi | minor)
      let 'minor += 1'; patch=0; seppa=; alpha=;
      ;;
    p | -p | pa | patch)
      let 'patch += 1'; seppa=; alpha=;
      ;;
    a | -a | al | alpha)
      # The alpha part is the only part not guaranteed to be a number.
      # Note that if no current alpha, must inc. patch to be < current vers.
      [ -z "${alpha}" ] && let 'patch += 1'
      let 'alpha += 1' || (>&2 echo "ERROR: Cannot bump non-number alpha part" && exit 1)
      ;;
    s | -s | same)
      ;;
    d | -d | delete)
      # This function is called in a subshell, so we'll scan again later to set
      #  PERFORM_DELETE=true.
      ;;
    *)
      >&2 echo "ERROR: Unknown bump part specifier: ‚Äú${part_or_version}‚Äù"
      exit 1
      ;;
  esac
  nextvers="${major:-0}.${minor:-0}"
  [ -n "${patch}" ] && nextvers="${nextvers}.${patch}"
  nextvers="${major:-0}.${minor:-0}.${patch:-0}"
  [ "${nextvers}" = "0.0.0" ] && nextvers="0.0.1"
  [ -n "${alpha}" ] && nextvers="${nextvers}${seppa:-a}${alpha}"
  echo "${nextvers}"
}

resolve_version_next () {
  local fullvers="$1"
  local part_or_version="$2"
  local nextvers
  if echo "${part_or_version}" | grep -E "${GITSMART_RE_VERSPARTS}" > /dev/null; then
    # A version. Compare against latest.
    must_version_gt "${part_or_version}" "${fullvers}"
    nextvers="${part_or_version}"
  else
    nextvers="$(resolve_version_bump "${fullvers}" "${part_or_version}")"
    [ $? -ne 0 ] && exit 1
  fi
  echo "${nextvers}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

parse_args_for_delete () {
  PERFORM_DELETE=false
  local part_or_version="$1"
  if ! ( echo "${part_or_version}" | grep -E "${GITSMART_RE_VERSPARTS}" > /dev/null ); then
    case "${part_or_version}" in
      d | -d | delete)
        PERFORM_DELETE=true
        ;;
      *)
        ;;
    esac
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_tvp_confirm_next () {
  local nextvers="$1"
  local prevvers="$2"
  # ${GIT_TVP_DRY} && return
  [ -n "${prevvers}" ] && prevvers="‚Äú${prevvers}‚Äù ‚Üí "
  local msg="Okay to bump ${prevvers}‚Äú${nextvers}‚Äù"
  local the_choice
  the_choice=$(SKIP_PROMPT_NL=true ask_yesnoskip "${msg}" "Y")
  [ $? -ne 0 ] && exit 1
  [ "${the_choice}" != "y" ] && return 1 || return 0
}

git_tvp_confirm_delete () {
  local nextvers="$1"
  local msg="Okay to delete ‚Äú${nextvers}‚Äù"
  local the_choice
  the_choice=$(SKIP_PROMPT_NL=true ask_yesnoskip "${msg}" "Y")
  [ $? -ne 0 ] && exit 1
  [ "${the_choice}" != "y" ] && return 1 || return 0
}

git_tvp_confirm_push () {
  local nextvers="$1"
  # ${GIT_TVP_DRY} && return
  local msg="Okay to push ‚Äú${nextvers}‚Äù"
  local the_choice
  the_choice=$(SKIP_PROMPT_NL=true ask_yesnoskip "${msg}" "Y")
  [ $? -ne 0 ] && exit 1
  [ "${the_choice}" != "y" ] && return 1 || return 0
}

echo_or_eval () {
  ${GIT_TVP_DRY} && echo "$@" || eval "$@"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_tag_local_add () {
  local nextvers="$1"
  local fullvers="$2"
  ${PERFORM_DELETE} && return
  [ "${nextvers}" = "${fullvers}" ] && return
  git_tvp_confirm_next "${nextvers}" "${fullvers}" || return
  # Note that this command tags HEAD, as opposed to a specific branch.
  # E.g., we could tag, say, the release branch:
  #   git tag -a ${nextvers} -m "Version: ${nextvers}" "release"
  # but that would probably be confusing to the user. So stick to HEAD.
  echo_or_eval git tag -a "${nextvers}" -m "'Version: ${nextvers}'"
}

git_tag_local_delete () {
  local nextvers="$1"
  ${PERFORM_DELETE} || return
  git_tvp_confirm_delete "${nextvers}" || return
  echo_or_eval git tag -d "${nextvers}"
}

git_tag_remote () {
  local nextvers="$1"
  local remote="$2"

  must_remote_exists "${remote}"

  # (lb): I considerd making the ls-remote call (which, e.g., pings GitHub)
  # to be optional. But it's just as easy to Ctrl-C when the script gets here.

  # Network call!
  R2G2P_REMOTE="${remote}" \
  RELEASE_VERSION="${nextvers}" \
  R2G2P_COMMIT="$(git rev-parse HEAD)" \
  R2G2P_GHUB_CLOBBER_CERTIFIED=${PERFORM_DELETE} \
  github_purge_release_and_tags_of_same_name
  #
  ${R2G2P_DO_PUSH_TAG:-false} || return

  # Note that if the tag existing, it may have been removed in call to
  # github_purge_release_and_tags_of_same_name, so can return now on
  # delete command.
  ${PERFORM_DELETE} && return

  git_tvp_confirm_push "${nextvers}" || return

  # NOTE: This'll push both commit and tag, as necessary.
  #       - And GitHub will make a release object, too.
  local branch="$(git_branch_name)"
  echo_or_eval git push "${remote}" "${branch}" "refs/tags/${nextvers}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

git_tvp_tag_vers_push () {
  local part_or_version="${1:-patch}"
  local remote="${2}"
  # Default to the remote tracking branch remote, or fallback to "origin".
  [ -z "${remote}" ] && remote="$(git_tracking_branch_remote)"
  [ -z "${remote}" ] && remote="origin"

  # Insist in a Git project.
  git_insist_git_repo || exit 1
  # Insist in a Git project, and it's tidy.
  git_insist_pristine || exit 1

  local headvers="$(git_branch_head_version)"

  ${GIT_TVP_DRY} && echo "# TEST AHOY!"

  # We don't need the remote to exist; we can still tag the local branch.
  # SKIP:
  #   must_remote_exists "${remote}"
  warn_remote_absent "${remote}"

  local fullvers="$(latest_version_tag)"

  local nextvers
  nextvers="$(resolve_version_next "${fullvers}" "${part_or_version}")"
  [ $? -ne 0 ] && exit 1

  parse_args_for_delete "${part_or_version}"

  # Insist HEAD unversioned or matches desired.
  must_head_unversioned_or_matching "${headvers}" "${fullvers}" "${remote}"

  git_tag_local_add "${nextvers}" "${fullvers}"
  git_tag_local_delete "${nextvers}"

  git_tag_remote "${nextvers}" "${remote}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  source_deps "${BASH_SOURCE[0]}" || exit 1
  git_tvp_tag_vers_push "$@"
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  main "${@}"
fi

